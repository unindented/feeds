---
/**
 * Copyright 2025 Daniel Perez Alvarez
 *
 * This file is part of Static Feeds.
 *
 * Static Feeds is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Static Feeds is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Static Feeds. If not, see <https://www.gnu.org/licenses/>.
 */

import type { HTMLAttributes } from "astro/types";

import { getLangFromUrl, useTranslations } from "../i18n";
import SearchIcon from "./icons/Search.astro";

type Props = HTMLAttributes<"dialog">;

const { id, class: className, ...otherProps } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<my-search-dialog class="defined:block hidden">
  <dialog
    {...otherProps}
    id={id}
    class:list={[
      className,
      "bg-uwu-base backdrop:bg-uwu-crust/50 backdrop:transition-discrete transition-discrete starting:open:opacity-0 starting:open:-translate-y-1/3 starting:open:backdrop:opacity-0 m-auto h-2/3 w-full translate-y-1/3 rounded-lg p-0 opacity-0 transition-[display,opacity,overlay,translate] duration-700 backdrop:opacity-0 backdrop:backdrop-blur-md backdrop:transition-[opacity,overlay,translate] backdrop:duration-500 open:translate-y-0 open:opacity-100 open:backdrop:opacity-100 md:max-w-screen-md",
    ]}
  >
    <div class="flex h-full flex-col">
      <form
        method="dialog"
        class="border-uwu-surface0 flex flex-col gap-2 border-b p-4 sm:flex-row sm:gap-2.5 sm:p-5 md:gap-3 md:p-6"
      >
        <label class="flex-1">
          <span class="sr-only">{t("components.SearchDialog.inputLabel")}</span>
          <div class="relative">
            <SearchIcon
              aria-hidden="true"
              class="fill-uwu-overlay2 pointer-events-none absolute start-1 h-10 w-10 p-3"
            />
            <input
              type="text"
              placeholder={t("components.SearchDialog.inputPlaceholder")}
              spellcheck="false"
              name="q"
              class="placeholder:text-uwu-overlay2 text-uwu-text ring-uwu-overlay0 shadow-xs w-full rounded-full py-2 pe-4 ps-12 text-sm ring-1 ring-inset md:text-base"
            />
          </div>
        </label>
        <div class="hidden flex-row gap-1 sm:flex sm:gap-1.5 md:gap-2">
          <button
            type="submit"
            class="bg-uwu-mauve text-uwu-base ring-uwu-mauve/50 shadow-xs cursor-pointer rounded-full px-4 text-sm font-semibold ring-1 ring-inset md:text-base"
          >
            {t("components.SearchDialog.searchLabel")}
          </button>
          <button
            type="submit"
            formnovalidate
            class="bg-uwu-base text-uwu-text ring-uwu-overlay0 shadow-xs cursor-pointer rounded-full px-4 text-sm font-semibold ring-1 ring-inset md:text-base"
          >
            {t("components.SearchDialog.cancelLabel")}
          </button>
        </div>
      </form>
    </div>
  </dialog>
</my-search-dialog>

<script>
  class MySearchDialog extends HTMLElement {
    #dialog: HTMLDialogElement | null;

    constructor() {
      super();

      this.#dialog = null;
    }

    connectedCallback() {
      this.#dialog = this.querySelector<HTMLDialogElement>("dialog");

      this.#dialog?.addEventListener("click", this.#handleDialogClick);

      this.#initSQLite();
    }

    #handleDialogClick = (event: MouseEvent) => {
      const target = event.target as HTMLElement;

      // Close the dialog when the overlay is clicked.
      if (target.nodeName.toLowerCase() === "dialog") {
        this.#dialog?.close();
      }
    };

    #initSQLite = async () => {
      const worker = new Worker(
        new URL("../utils/sqliteWorker.ts", import.meta.url),
        { type: "module" },
      );
      worker.addEventListener("message", ({ data: { type, payload } }) => {
        switch (type) {
          case "log-debug":
            console.debug("[sqlite]", ...payload);
            break;
          case "log-info":
            console.info("[sqlite]", ...payload);
            break;
          case "log-warn":
            console.warn("[sqlite]", ...payload);
            break;
          case "log-error":
            console.error("[sqlite]", ...payload);
            break;
        }
      });
    };
  }

  customElements.define("my-search-dialog", MySearchDialog);
</script>
