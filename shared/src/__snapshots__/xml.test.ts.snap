// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`flattenFeeds > 'gathers feeds from an OPML document w…' 1`] = `
[
  {
    "htmlUrl": "https://nicholas.carlini.com/",
    "id": "nicholas-carlini-com",
    "path": null,
    "title": "Nicholas Carlini",
    "xmlUrl": "https://nicholas.carlini.com/writing/feed.xml",
  },
  {
    "htmlUrl": "https://simonwillison.net/",
    "id": "simonwillison-net",
    "path": null,
    "title": "Simon Willison",
    "xmlUrl": "https://simonwillison.net/atom/everything/",
  },
]
`;

exports[`flattenFeeds > 'gathers feeds from an OPML document w…' 2`] = `
[
  {
    "htmlUrl": "https://fasterthanli.me/",
    "id": "fasterthanli-me",
    "path": "Rust",
    "title": "Amos Wenger",
    "xmlUrl": "https://fasterthanli.me/index.xml",
  },
  {
    "htmlUrl": "https://sunshowers.io/",
    "id": "sunshowers-io",
    "path": "Rust",
    "title": "Rain",
    "xmlUrl": "https://sunshowers.io/index.xml",
  },
]
`;

exports[`flattenFeeds > 'gathers feeds from an OPML document w…' 3`] = `
[
  {
    "htmlUrl": "https://lea.verou.me/",
    "id": "lea-verou-me",
    "path": "Technology/Web Development",
    "title": "Lea Verou",
    "xmlUrl": "https://lea.verou.me/feed.xml",
  },
  {
    "htmlUrl": "https://tink.uk/",
    "id": "tink-uk",
    "path": "Technology/Web Development/Accessibility",
    "title": "Léonie Watson",
    "xmlUrl": "https://tink.uk/feed.xml",
  },
]
`;

exports[`flattenFeeds > 'gathers feeds from an OPML document w…' 4`] = `
[
  {
    "htmlUrl": "https://arstechnica.com/",
    "id": "arstechnica-com",
    "path": "News/Technology",
    "title": "Ars Technica",
    "xmlUrl": "https://arstechnica.com/feed/",
  },
  {
    "htmlUrl": "https://www.theverge.com/",
    "id": "theverge-com",
    "path": "News/Untitled",
    "title": "Untitled",
    "xmlUrl": "https://www.theverge.com/rss/index.xml",
  },
]
`;

exports[`readFeed > 'reads an Atom feed with items with ri…' 1`] = `
[
  {
    "feedId": "example-com",
    "htmlUrl": "https://fasterthanli.me/articles/the-case-for-sans-io",
    "id": "https://fasterthanli.me/articles/the-case-for-sans-io",
    "published": 2025-02-07T18:53:01.000Z,
    "summary": "The most popular option to decompress ZIP files from the Rust programming language is a crate simply named zip — At the time of this writing, it has 48 million downloads. It’s fully-featured, supporting various compression methods, encryption, and even supports writing zip files.",
    "title": "Untitled",
    "updated": 2025-02-07T18:53:01.000Z,
  },
  {
    "feedId": "example-com",
    "htmlUrl": "https://fasterthanli.me/articles/catching-up-with-async-rust",
    "id": "https://fasterthanli.me/articles/catching-up-with-async-rust",
    "published": 2024-12-25T07:30:00.000Z,
    "summary": "In December 2023, a minor miracle happened: async fn in traits shipped. As of Rust 1.39, we already had free-standing async functions: pub async fn read_hosts() -> eyre::ResultVecu8>> { // etc. } …and async functions in impl blocks: impl HostReader { pub async fn read_hosts(&self) -> eyre::ResultVecu8…",
    "title": "Catching up with async Rust",
    "updated": 2024-12-25T07:30:00.000Z,
  },
]
`;

exports[`readFeed > 'reads an Atom feed with relative URLs' 1`] = `
[
  {
    "feedId": "example-com",
    "htmlUrl": "https://joshghent.com/eda-rules-of-thumb/",
    "id": "https://joshghent.com/eda-rules-of-thumb/",
    "published": 2025-01-09T00:00:00.000Z,
    "summary": "Event driven architectures are a fantastic mechanism for powering decoupled services. But they depend on the contract - the actual data points within each event. As with these sorts of things, there is always an "it depends" of what data should go within events. Therefore, this guide is not prescriptive…",
    "title": "Event Driven Architecture Rules of Thumb",
    "updated": 2025-01-09T00:00:00.000Z,
  },
  {
    "feedId": "example-com",
    "htmlUrl": "https://joshghent.com/pets-vs-cattle/",
    "id": "https://joshghent.com/pets-vs-cattle/",
    "published": 2025-01-08T00:00:00.000Z,
    "summary": "Ancient history tells us that a peoples known as the "sysadmins" or "web masters" used to manually configure servers via the archaic command line. These people literally SSH'ed into machines and ran commands on them. Utter animals.",
    "title": "ClickOps and IaC - which are Pets and Cattle?",
    "updated": 2025-01-08T00:00:00.000Z,
  },
]
`;

exports[`readFeed > 'reads an RSS feed with items with des…' 1`] = `
[
  {
    "feedId": "example-com",
    "htmlUrl": "https://krebsonsecurity.com/2025/02/how-phished-data-turns-into-apple-google-wallets/",
    "id": "https://krebsonsecurity.com/2025/02/how-phished-data-turns-into-apple-google-wallets/",
    "published": 2025-02-18T18:37:26.000Z,
    "summary": "Carding -- the underground business of stealing, selling and swiping stolen payment card data -- has long been the dominion of Russia-based hackers. Happily, the broad deployment of more secure chip-based payment cards in the United States has weakened the carding market. But a flurry of innovation from…",
    "title": "How Phished Data Turns into Apple & Google Wallets",
    "updated": 2025-02-18T18:37:26.000Z,
  },
  {
    "feedId": "example-com",
    "htmlUrl": "https://krebsonsecurity.com/2025/02/nearly-a-year-later-mozilla-is-still-promoting-onerep/",
    "id": "https://krebsonsecurity.com/2025/02/nearly-a-year-later-mozilla-is-still-promoting-onerep/",
    "published": 2025-02-13T20:14:47.000Z,
    "summary": "In mid-March 2024, KrebsOnSecurity revealed that the founder of the personal data removal service Onerep also founded dozens of people-search companies. Shortly after that investigation was published, Mozilla said it would stop bundling Onerep with the Firefox browser and wind down its partnership. But…",
    "title": "Nearly a Year Later, Mozilla is Still Promoting OneRep",
    "updated": 2025-02-13T20:14:47.000Z,
  },
]
`;

exports[`readFeed > 'reads an RSS feed with items with pla…' 1`] = `
[
  {
    "feedId": "example-com",
    "htmlUrl": "https://nicholas.carlini.com/writing/2025/forecasting-ai-2025-update.html",
    "id": "https://nicholas.carlini.com/writing/2025/forecasting-ai-2025-update.html",
    "published": 2025-02-10T00:00:00.000Z,
    "summary": "Late last year, I published an article asking readers to make 30 forecasts about the future of AI in 2027 and 2030—from whether or not you could buy a robot to do your laundry, to predicting the valuation of leading AI labs, to estimating the likelihood of an AI-caused catastrophe.",
    "title": "AI forecasting retrospective: you're (probably) over-confident",
    "updated": 2025-02-10T00:00:00.000Z,
  },
  {
    "feedId": "example-com",
    "htmlUrl": "https://nicholas.carlini.com/writing/2025/regex-chess.html",
    "id": "https://nicholas.carlini.com/writing/2025/regex-chess.html",
    "published": 2025-01-06T00:00:00.000Z,
    "summary": "Over the holidays I decided it's been too long since I did something with entirely no purpose. So without further ado, I present to you ... Regex Chess: sequence of 84,688 regular expressions that, when executed in order, will play a (valid; not entirely terrible) move given a chess board as input.",
    "title": "Regex Chess: A 2-ply minimax chess engine in 84,688 regular expressions",
    "updated": 2025-01-06T00:00:00.000Z,
  },
]
`;

exports[`readFeed > 'reads an RSS feed with items with ric…' 1`] = `
[
  {
    "feedId": "example-com",
    "htmlUrl": "https://sunshowers.io/posts/monads-through-pbt/",
    "id": "https://sunshowers.io/posts/monads-through-pbt/",
    "published": 2025-02-19T00:00:00.000Z,
    "summary": "In programming pedagogy, monads have a place as a mystical object from the functional programming world that’s hard to understand and even harder to explain. The stereotype about monad explanations is that they fall into two buckets: either comparisons to some kind of food item, or throwing complex mathematical…",
    "title": "Demystifying monads in Rust through property-based testing",
    "updated": 2025-02-19T00:00:00.000Z,
  },
  {
    "feedId": "example-com",
    "htmlUrl": "https://sunshowers.io/posts/there-is-no-free-will/",
    "id": "https://sunshowers.io/posts/there-is-no-free-will/",
    "published": 2025-01-29T00:00:00.000Z,
    "summary": "There’s absolutely no brand-new insight in this post. A huge amount of credit goes to various philosophers and thinkers, especially folks like Aaron Rabinowitz, for shaping my views. Any errors in it are my own. In the natural world, everything that occurs is the result of a chain of causation all the…",
    "title": "Free will quite clearly doesn't exist",
    "updated": 2025-01-29T00:00:00.000Z,
  },
]
`;

exports[`readFeed > 'reads an RSS feed with items without …' 1`] = `
[
  {
    "feedId": "example-com",
    "htmlUrl": "https://fabiensanglard.net/sunset/index.html",
    "id": "https://fabiensanglard.net/sunset/index.html",
    "published": 2024-08-18T00:00:00.000Z,
    "summary": null,
    "title": "Watching sunsets",
    "updated": 2024-08-18T00:00:00.000Z,
  },
  {
    "feedId": "example-com",
    "htmlUrl": "https://fabiensanglard.net/snes_ppus_why/index.html",
    "id": "https://fabiensanglard.net/snes_ppus_why/index.html",
    "published": 2024-08-09T00:00:00.000Z,
    "summary": null,
    "title": "SNES: Sprites and backgrounds rendering",
    "updated": 2024-08-09T00:00:00.000Z,
  },
]
`;

exports[`readOpmlFile > 'parses an OPML file with deep nested …' 1`] = `
{
  "?xml": {
    "encoding": "UTF-8",
    "version": "1.0",
  },
  "opml": {
    "body": {
      "outline": [
        {
          "outline": [
            {
              "outline": [
                {
                  "htmlUrl": "https://lea.verou.me/",
                  "text": "Lea Verou",
                  "type": "rss",
                  "xmlUrl": "https://lea.verou.me/feed.xml",
                },
                {
                  "outline": [
                    {
                      "htmlUrl": "https://tink.uk/",
                      "text": "Léonie Watson",
                      "type": "rss",
                      "xmlUrl": "https://tink.uk/feed.xml",
                    },
                  ],
                  "text": "Accessibility",
                },
              ],
              "text": "Web Development",
            },
          ],
          "text": "Technology",
        },
      ],
    },
    "head": {
      "title": "My feeds",
    },
    "version": "1.1",
  },
}
`;

exports[`readOpmlFile > 'parses an OPML file with shallow nest…' 1`] = `
{
  "?xml": {
    "encoding": "UTF-8",
    "version": "1.0",
  },
  "opml": {
    "body": {
      "outline": [
        {
          "outline": [
            {
              "htmlUrl": "https://fasterthanli.me/",
              "text": "Amos Wenger",
              "type": "rss",
              "xmlUrl": "https://fasterthanli.me/index.xml",
            },
            {
              "htmlUrl": "https://sunshowers.io/",
              "text": "Rain",
              "type": "rss",
              "xmlUrl": "https://sunshowers.io/index.xml",
            },
          ],
          "text": "Rust",
        },
      ],
    },
    "head": {
      "title": "My feeds",
    },
    "version": "1.1",
  },
}
`;

exports[`readOpmlFile > 'parses an OPML file with untitled out…' 1`] = `
{
  "?xml": {
    "encoding": "UTF-8",
    "version": "1.0",
  },
  "opml": {
    "body": {
      "outline": [
        {
          "outline": [
            {
              "outline": [
                {
                  "htmlUrl": "https://arstechnica.com/",
                  "text": "Ars Technica",
                  "type": "rss",
                  "xmlUrl": "https://arstechnica.com/feed/",
                },
              ],
              "text": "Technology",
            },
            {
              "outline": [
                {
                  "htmlUrl": "https://www.theverge.com/",
                  "type": "rss",
                  "xmlUrl": "https://www.theverge.com/rss/index.xml",
                },
              ],
            },
          ],
          "text": "News",
        },
      ],
    },
    "head": {
      "title": "My feeds",
    },
    "version": "1.1",
  },
}
`;

exports[`readOpmlFile > 'parses an OPML file without nested ou…' 1`] = `
{
  "?xml": {
    "encoding": "UTF-8",
    "version": "1.0",
  },
  "opml": {
    "body": {
      "outline": [
        {
          "htmlUrl": "https://nicholas.carlini.com/",
          "text": "Nicholas Carlini",
          "type": "rss",
          "xmlUrl": "https://nicholas.carlini.com/writing/feed.xml",
        },
        {
          "htmlUrl": "https://simonwillison.net/",
          "text": "Simon Willison",
          "type": "rss",
          "xmlUrl": "https://simonwillison.net/atom/everything/",
        },
      ],
    },
    "head": {
      "title": "My feeds",
    },
    "version": "1.1",
  },
}
`;
